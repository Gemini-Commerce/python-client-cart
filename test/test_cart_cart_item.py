# coding: utf-8

"""
    Cart Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from cart.models.cart_cart_item import CartCartItem

class TestCartCartItem(unittest.TestCase):
    """CartCartItem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CartCartItem:
        """Test CartCartItem
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CartCartItem`
        """
        model = CartCartItem()
        if include_optional:
            return CartCartItem(
                id = '',
                product_grn = '',
                product_configuration = [
                    cart.models.cart_product_configuration_step.cartProductConfigurationStep(
                        id = '', 
                        grn = '', 
                        label = cart.models.cart_localized_text.cartLocalizedText(
                            value = {
                                'key' : ''
                                }, ), 
                        description = cart.models.cart_localized_text.cartLocalizedText(), 
                        options = [
                            cart.models.cart_product_configuration_step_option.cartProductConfigurationStepOption(
                                id = '', 
                                grn = '', 
                                price_variation = cart.models.cart_money.cartMoney(
                                    units = '', 
                                    micros = 56, ), 
                                weight_variation = 1.337, 
                                image = cart.models.option_image.OptionImage(
                                    grn = '', 
                                    url = '', ), 
                                has_quantity = True, 
                                quantity = 56, )
                            ], )
                    ],
                quantity = 56,
                price = cart.models.cart_money.cartMoney(
                    units = '', 
                    micros = 56, ),
                list_price = cart.models.cart_money.cartMoney(
                    units = '', 
                    micros = 56, ),
                discount = cart.models.cart_money.cartMoney(
                    units = '', 
                    micros = 56, ),
                base_price = cart.models.cart_money.cartMoney(
                    units = '', 
                    micros = 56, ),
                custom_price = cart.models.cart_item_custom_price.cartItemCustomPrice(
                    price = cart.models.cart_money.cartMoney(
                        units = '', 
                        micros = 56, ), 
                    previous_price = cart.models.cart_money.cartMoney(
                        units = '', 
                        micros = 56, ), ),
                vat_amount = cart.models.cart_money.cartMoney(
                    units = '', 
                    micros = 56, ),
                vat_percentage = 1.337,
                vat_inaccurate = True,
                vat_calculated = True,
                localized_name = {
                    'key' : ''
                    },
                product_code = '',
                product_sku = '',
                image_grn = '',
                variant_options = '',
                is_virtual = True,
                promotion_grns = [
                    ''
                    ],
                additional_info = '',
                product_data = ''
            )
        else:
            return CartCartItem(
        )
        """

    def testCartCartItem(self):
        """Test CartCartItem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
