# coding: utf-8

"""
    Cart Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from cart.models.cart_get_active_cart_by_customer_response import CartGetActiveCartByCustomerResponse

class TestCartGetActiveCartByCustomerResponse(unittest.TestCase):
    """CartGetActiveCartByCustomerResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CartGetActiveCartByCustomerResponse:
        """Test CartGetActiveCartByCustomerResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CartGetActiveCartByCustomerResponse`
        """
        model = CartGetActiveCartByCustomerResponse()
        if include_optional:
            return CartGetActiveCartByCustomerResponse(
                cart = cart.models.cart_cart_data.cartCartData(
                    id = '', 
                    grn = '', 
                    channel = '', 
                    market = '', 
                    locale = '', 
                    items = [
                        cart.models.cart_cart_item.cartCartItem(
                            id = '', 
                            product_grn = '', 
                            product_configuration = [
                                cart.models.cart_product_configuration_step.cartProductConfigurationStep(
                                    id = '', 
                                    grn = '', 
                                    label = cart.models.cart_localized_text.cartLocalizedText(
                                        value = {
                                            'key' : ''
                                            }, ), 
                                    description = cart.models.cart_localized_text.cartLocalizedText(), 
                                    options = [
                                        cart.models.cart_product_configuration_step_option.cartProductConfigurationStepOption(
                                            id = '', 
                                            grn = '', 
                                            price_variation = cart.models.cart_money.cartMoney(
                                                units = '', 
                                                micros = 56, ), 
                                            weight_variation = 1.337, 
                                            image = cart.models.option_image.OptionImage(
                                                grn = '', 
                                                url = '', ), 
                                            has_quantity = True, 
                                            quantity = 56, )
                                        ], )
                                ], 
                            quantity = 56, 
                            price = cart.models.cart_money.cartMoney(
                                units = '', 
                                micros = 56, ), 
                            list_price = , 
                            discount = , 
                            base_price = , 
                            custom_price = cart.models.cart_item_custom_price.cartItemCustomPrice(
                                previous_price = , ), 
                            vat_amount = , 
                            vat_percentage = 1.337, 
                            vat_inaccurate = True, 
                            vat_calculated = True, 
                            localized_name = {
                                'key' : ''
                                }, 
                            product_code = '', 
                            product_sku = '', 
                            image_grn = '', 
                            variant_options = '', 
                            is_virtual = True, 
                            promotion_grns = [
                                ''
                                ], 
                            additional_info = '', 
                            product_data = '', )
                        ], 
                    payments = [
                        cart.models.cart_payment_data.cartPaymentData(
                            code = '', 
                            title = , 
                            payload = '', 
                            fee = , 
                            amount = , 
                            vat_percentage = 1.337, 
                            vat_inaccurate = True, 
                            vat_calculated = True, 
                            is_upfront = True, )
                        ], 
                    shipments = [
                        cart.models.cart_shipment_data.cartShipmentData(
                            code = '', 
                            method = '', 
                            shipment_grn = '', 
                            payload = '', 
                            cart_item_ids = [
                                ''
                                ], 
                            vat_percentage = 1.337, 
                            vat_inaccurate = True, 
                            vat_calculated = True, )
                        ], 
                    promotions = [
                        cart.models.cart_promotion_data.cartPromotionData(
                            promotion_grn = '', 
                            type = '', 
                            payload = '', 
                            cart_item_ids = [
                                ''
                                ], 
                            name = '', 
                            coupon_code = '', 
                            vat_percentage = 1.337, 
                            vat_inaccurate = True, 
                            vat_calculated = True, )
                        ], 
                    currency = 'XXX', 
                    subtotals = [
                        cart.models.cart_cart_subtotal.cartCartSubtotal(
                            code = 'UNKNOWN', )
                        ], 
                    total = , 
                    total_due = , 
                    vat_included = True, 
                    billing_address = cart.models.cart_postal_address.cartPostalAddress(
                        revision = 56, 
                        region_code = '', 
                        language_code = '', 
                        postal_code = '', 
                        sorting_code = '', 
                        administrative_area = '', 
                        locality = '', 
                        sublocality = '', 
                        address_lines = [
                            ''
                            ], 
                        recipients = [
                            ''
                            ], 
                        organization = '', 
                        phone_number = '', 
                        additional_info = cart.models.additional_info.additionalInfo(), ), 
                    shipping_address = cart.models.cart_postal_address.cartPostalAddress(
                        revision = 56, 
                        region_code = '', 
                        language_code = '', 
                        postal_code = '', 
                        sorting_code = '', 
                        administrative_area = '', 
                        locality = '', 
                        sublocality = '', 
                        organization = '', 
                        phone_number = '', 
                        additional_info = cart.models.additional_info.additionalInfo(), ), 
                    status = 'UNKNOWN', 
                    customer = cart.models.cart_customer_data.cartCustomerData(
                        customer_grn = '', 
                        firstname = '', 
                        lastname = '', 
                        email = '', 
                        phone_number = '', 
                        groups = [
                            ''
                            ], 
                        tax_code = '', 
                        certified_email = '', 
                        sdi_code = '', 
                        fiscal_code = '', 
                        company_name = '', 
                        agent_grn = '', ), 
                    notes = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return CartGetActiveCartByCustomerResponse(
        )
        """

    def testCartGetActiveCartByCustomerResponse(self):
        """Test CartGetActiveCartByCustomerResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
