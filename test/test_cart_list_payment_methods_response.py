# coding: utf-8

"""
    Cart Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from cart.models.cart_list_payment_methods_response import CartListPaymentMethodsResponse

class TestCartListPaymentMethodsResponse(unittest.TestCase):
    """CartListPaymentMethodsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CartListPaymentMethodsResponse:
        """Test CartListPaymentMethodsResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CartListPaymentMethodsResponse`
        """
        model = CartListPaymentMethodsResponse()
        if include_optional:
            return CartListPaymentMethodsResponse(
                payments = [
                    cart.models.cart_payment_data.cartPaymentData(
                        code = '', 
                        title = cart.models.cart_localized_text.cartLocalizedText(
                            value = {
                                'key' : ''
                                }, ), 
                        payload = '', 
                        fee = cart.models.cart_money.cartMoney(
                            units = '', 
                            micros = 56, ), 
                        amount = cart.models.cart_money.cartMoney(
                            units = '', 
                            micros = 56, ), 
                        label = cart.models.cart_localized_text.cartLocalizedText(), 
                        description = , 
                        vat_amount = , 
                        vat_percentage = 1.337, 
                        vat_inaccurate = True, 
                        vat_calculated = True, 
                        is_upfront = True, )
                    ]
            )
        else:
            return CartListPaymentMethodsResponse(
        )
        """

    def testCartListPaymentMethodsResponse(self):
        """Test CartListPaymentMethodsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
