# coding: utf-8

"""
    Cart Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from cart.models.cart_set_custom_price_on_items_request import CartSetCustomPriceOnItemsRequest

class TestCartSetCustomPriceOnItemsRequest(unittest.TestCase):
    """CartSetCustomPriceOnItemsRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CartSetCustomPriceOnItemsRequest:
        """Test CartSetCustomPriceOnItemsRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CartSetCustomPriceOnItemsRequest`
        """
        model = CartSetCustomPriceOnItemsRequest()
        if include_optional:
            return CartSetCustomPriceOnItemsRequest(
                tenant_id = '',
                cart_id = '',
                cart_items = [
                    cart.models.cart_set_custom_price_on_items_request_cart_item.cartSetCustomPriceOnItemsRequestCartItem(
                        id = '', 
                        free_of_charge = True, 
                        unset = True, 
                        custom_price_row = cart.models.cart_money.cartMoney(
                            units = '', 
                            micros = 56, ), 
                        custom_price_unit = cart.models.cart_money.cartMoney(
                            units = '', 
                            micros = 56, ), 
                        discount_percentage = 1.337, )
                    ]
            )
        else:
            return CartSetCustomPriceOnItemsRequest(
        )
        """

    def testCartSetCustomPriceOnItemsRequest(self):
        """Test CartSetCustomPriceOnItemsRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
