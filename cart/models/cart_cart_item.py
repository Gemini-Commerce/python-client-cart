# coding: utf-8

"""
    Cart Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from cart.models.cart_item_custom_price import CartItemCustomPrice
from cart.models.cart_money import CartMoney
from cart.models.cart_product_configuration_step import CartProductConfigurationStep
from typing import Optional, Set
from typing_extensions import Self

class CartCartItem(BaseModel):
    """
    CartCartItem
    """ # noqa: E501
    id: Optional[StrictStr] = None
    product_grn: Optional[StrictStr] = Field(default=None, alias="productGrn")
    product_configuration: Optional[List[CartProductConfigurationStep]] = Field(default=None, alias="productConfiguration")
    quantity: Optional[StrictInt] = None
    price: Optional[CartMoney] = None
    list_price: Optional[CartMoney] = Field(default=None, alias="listPrice")
    discount: Optional[CartMoney] = None
    base_price: Optional[CartMoney] = Field(default=None, alias="basePrice")
    custom_price: Optional[CartItemCustomPrice] = Field(default=None, alias="customPrice")
    vat_amount: Optional[CartMoney] = Field(default=None, alias="vatAmount")
    vat_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="vatPercentage")
    vat_inaccurate: Optional[StrictBool] = Field(default=None, alias="vatInaccurate")
    vat_calculated: Optional[StrictBool] = Field(default=None, alias="vatCalculated")
    localized_name: Optional[Dict[str, StrictStr]] = Field(default=None, alias="localizedName")
    product_code: Optional[StrictStr] = Field(default=None, alias="productCode")
    product_sku: Optional[StrictStr] = Field(default=None, alias="productSku")
    image_grn: Optional[StrictStr] = Field(default=None, alias="imageGrn")
    variant_options: Optional[StrictStr] = Field(default=None, alias="variantOptions")
    is_virtual: Optional[StrictBool] = Field(default=None, alias="isVirtual")
    promotion_grns: Optional[List[StrictStr]] = Field(default=None, alias="promotionGrns")
    additional_info: Optional[StrictStr] = Field(default=None, alias="additionalInfo")
    product_data: Optional[StrictStr] = Field(default=None, alias="productData")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "productGrn", "productConfiguration", "quantity", "price", "listPrice", "discount", "basePrice", "customPrice", "vatAmount", "vatPercentage", "vatInaccurate", "vatCalculated", "localizedName", "productCode", "productSku", "imageGrn", "variantOptions", "isVirtual", "promotionGrns", "additionalInfo", "productData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CartCartItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in product_configuration (list)
        _items = []
        if self.product_configuration:
            for _item_product_configuration in self.product_configuration:
                if _item_product_configuration:
                    _items.append(_item_product_configuration.to_dict())
            _dict['productConfiguration'] = _items
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of list_price
        if self.list_price:
            _dict['listPrice'] = self.list_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discount
        if self.discount:
            _dict['discount'] = self.discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of base_price
        if self.base_price:
            _dict['basePrice'] = self.base_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_price
        if self.custom_price:
            _dict['customPrice'] = self.custom_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vat_amount
        if self.vat_amount:
            _dict['vatAmount'] = self.vat_amount.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CartCartItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "productGrn": obj.get("productGrn"),
            "productConfiguration": [CartProductConfigurationStep.from_dict(_item) for _item in obj["productConfiguration"]] if obj.get("productConfiguration") is not None else None,
            "quantity": obj.get("quantity"),
            "price": CartMoney.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "listPrice": CartMoney.from_dict(obj["listPrice"]) if obj.get("listPrice") is not None else None,
            "discount": CartMoney.from_dict(obj["discount"]) if obj.get("discount") is not None else None,
            "basePrice": CartMoney.from_dict(obj["basePrice"]) if obj.get("basePrice") is not None else None,
            "customPrice": CartItemCustomPrice.from_dict(obj["customPrice"]) if obj.get("customPrice") is not None else None,
            "vatAmount": CartMoney.from_dict(obj["vatAmount"]) if obj.get("vatAmount") is not None else None,
            "vatPercentage": obj.get("vatPercentage"),
            "vatInaccurate": obj.get("vatInaccurate"),
            "vatCalculated": obj.get("vatCalculated"),
            "localizedName": obj.get("localizedName"),
            "productCode": obj.get("productCode"),
            "productSku": obj.get("productSku"),
            "imageGrn": obj.get("imageGrn"),
            "variantOptions": obj.get("variantOptions"),
            "isVirtual": obj.get("isVirtual"),
            "promotionGrns": obj.get("promotionGrns"),
            "additionalInfo": obj.get("additionalInfo"),
            "productData": obj.get("productData")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


