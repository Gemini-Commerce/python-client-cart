# coding: utf-8

"""
    Cart Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from cart.models.cart_localized_text import CartLocalizedText
from cart.models.cart_money import CartMoney
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CartPaymentData(BaseModel):
    """
    CartPaymentData
    """ # noqa: E501
    code: Optional[StrictStr] = None
    title: Optional[CartLocalizedText] = None
    payload: Optional[StrictStr] = None
    fee: Optional[CartMoney] = None
    amount: Optional[CartMoney] = None
    label: Optional[CartLocalizedText] = None
    description: Optional[CartLocalizedText] = None
    vat_amount: Optional[CartMoney] = Field(default=None, alias="vatAmount")
    vat_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="vatPercentage")
    vat_inaccurate: Optional[StrictBool] = Field(default=None, alias="vatInaccurate")
    vat_calculated: Optional[StrictBool] = Field(default=None, alias="vatCalculated")
    is_upfront: Optional[StrictBool] = Field(default=None, alias="isUpfront")
    __properties: ClassVar[List[str]] = ["code", "title", "payload", "fee", "amount", "label", "description", "vatAmount", "vatPercentage", "vatInaccurate", "vatCalculated", "isUpfront"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CartPaymentData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of title
        if self.title:
            _dict['title'] = self.title.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fee
        if self.fee:
            _dict['fee'] = self.fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of label
        if self.label:
            _dict['label'] = self.label.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vat_amount
        if self.vat_amount:
            _dict['vatAmount'] = self.vat_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CartPaymentData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "title": CartLocalizedText.from_dict(obj.get("title")) if obj.get("title") is not None else None,
            "payload": obj.get("payload"),
            "fee": CartMoney.from_dict(obj.get("fee")) if obj.get("fee") is not None else None,
            "amount": CartMoney.from_dict(obj.get("amount")) if obj.get("amount") is not None else None,
            "label": CartLocalizedText.from_dict(obj.get("label")) if obj.get("label") is not None else None,
            "description": CartLocalizedText.from_dict(obj.get("description")) if obj.get("description") is not None else None,
            "vatAmount": CartMoney.from_dict(obj.get("vatAmount")) if obj.get("vatAmount") is not None else None,
            "vatPercentage": obj.get("vatPercentage"),
            "vatInaccurate": obj.get("vatInaccurate"),
            "vatCalculated": obj.get("vatCalculated"),
            "isUpfront": obj.get("isUpfront")
        })
        return _obj


